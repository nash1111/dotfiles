using BinaryProvider

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = Product[
    LibraryProduct(prefix, String["libmariadb"], :libmariadb),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaDatabases/MySQLBuilder/releases/download/v0.20"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
     BinaryProvider.Linux(:aarch64, :glibc) => ("$bin_prefix/MySQL.aarch64-linux-gnu.tar.gz", "d64387bb5fcaee52c3f5a826d49a9ed67b21799df44c77e0cb20bead1c72076a"),
    BinaryProvider.Linux(:armv7l, :glibc) => ("$bin_prefix/MySQL.arm-linux-gnueabihf.tar.gz", "413aa31791ddb88f074528fb0dabe5158a5aa72a92008aabbd440392dd3ec8ee"),
    BinaryProvider.Linux(:i686, :glibc) => ("$bin_prefix/MySQL.i686-linux-gnu.tar.gz", "c74e646ed02b91113bef5d51d81dd38600dbb91568679bdfdeebfeb3c455ad9c"),
    BinaryProvider.Linux(:powerpc64le, :glibc) => ("$bin_prefix/MySQL.powerpc64le-linux-gnu.tar.gz", "5c610ecacb736a41b2eba747192bbab95f54ff8a3622412c58308e2951d17dff"),
    BinaryProvider.MacOS() => ("$bin_prefix/MySQL.x86_64-apple-darwin14.tar.gz", "7980bed3b89fbf2f043a64871166df48d3c0b73436af9da0b2cd539a889daee5"),
    BinaryProvider.Linux(:x86_64, :glibc) => ("$bin_prefix/MySQL.x86_64-linux-gnu.tar.gz", "482a1abb9e594af99c7dd43ddf8898ab41192d2686aaf85535993e63ff6aafd5"),

    BinaryProvider.Windows(:i686) => ("$bin_prefix/MySQL.i686-w64-mingw32.tar.gz", "8f391c46b412c51298192955840268b296a751a0b07e66ca7951cade27bdf667"),
    BinaryProvider.Windows(:x86_64) => ("$bin_prefix/MySQL.x86_64-w64-mingw32.tar.gz", "f80694f5bb756240fa04965c02c2820005bac9d452045c43f77bbc944236025f"),
)

# First, check to see if we're all satisfied
if any(!satisfied(p; verbose=verbose) for p in products)
    if haskey(download_info, platform_key())
        # Download and install binaries
        url, tarball_hash = download_info[platform_key()]
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    else
        # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
        # Alternatively, you could attempt to install from a separate provider,
        # build from source or something more even more ambitious here.
        error("Your platform $(Sys.MACHINE) is not supported by this package!")
    end
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
