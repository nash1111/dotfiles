using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libarpack"], :libarpack),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaLinearAlgebra/ArpackBuilder/releases/download/v3.5.0-0.2.20"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/ArpackBuilder.aarch64-linux-gnu.tar.gz", "64c4eff3ccfda3aea9584d271c828546464f5994ab7b7b13de462ee2e86bbeb8"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/ArpackBuilder.arm-linux-gnueabihf.tar.gz", "b6c8a42035db33505266c5d07070b6f32cd35b6b63171b7c78dc7d130bf02b3f"),
    Linux(:i686, :glibc) => ("$bin_prefix/ArpackBuilder.i686-linux-gnu.tar.gz", "30aefe3c7ce9a867a1b7e0c5806b86f96be88e7aff5396199b23e0338f4c12a5"),
    Windows(:i686) => ("$bin_prefix/ArpackBuilder.i686-w64-mingw32.tar.gz", "5786c2c4f3c5d2705a3d42794c720f0115bf057029796dda70f93c9af85e0978"),
    MacOS(:x86_64) => ("$bin_prefix/ArpackBuilder.x86_64-apple-darwin14.tar.gz", "c6409d2793a6a9732651e95c7be8eb26d4fbeed704900270e387588d6eccb478"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/ArpackBuilder.x86_64-linux-gnu.tar.gz", "2baa6458b378008f454bfc96dbf32681f74b0f51496f8483c5b5411457371d3e"),
    Windows(:x86_64) => ("$bin_prefix/ArpackBuilder.x86_64-w64-mingw32.tar.gz", "4acdb52e27f12bf0f051fd61b59facb558b8ee72ff498c4c60f2a91d7a6aa8c6"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
