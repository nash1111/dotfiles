Test app:
  use the Pkg, Metadata, Github packages to get extended information about official packages: details, commit history, stars, watchers, etc.
  provide functionality to search packages by various criteria
  provide a web ui for searching packages

v 0.5.x
✔ has_many
✔ logging in production: requests & errors, logging level, logging formatting options
✔ bug fix: github search overwriting official packages (test app)
✔ generators for models, controllers, resources
✔ has_many_through, has_one_through, has_and_belongs_to_many relationships <-- sort of, added support for random relationships using SQLOn()
✔ html/mustache layouts, views and rendering
✔ assets management && brunch integration
✔ authors  (test app)
✔ add stars, forks, watchers, etc (test app) @done (16-07-12 22:22)

v 0.6.x
☐ new test app - blogging platform (articles, comments, tags, versions, users)
✔ Gallium debugging
✔ support for POST - routing, params
✔ model validations
✔ authorization
✔ caching - data caching (redis, memcache, file system)
✔ view / partials caching -- and not reloading views in production
✔ reverse routing -> resource to route
✔ parallel serving
✔ proper error handling (50x, 40x) pages
✔ simplify migrations to skip type and use modules
✔ simplify tasks to skip type and use modules
✔ add a method to automatically run all DOWN migrations
✔ move postgres specific code into the adapter
✔ rename methods ending in ! to end in !! and follow julia's guidelines
✔ rename methods to not use "_" @done (16-07-12 22:23)
✔ change from Logging to Lumberjack

v 0.7.x
# PERFORMANCE
✔ type hinting, API consolidation, cleanup
✔ all instances of m() must be type hinted
✔ implement Flax, a new template system in 100% julia
✔ review the JSON builder / JSON templates

# FEATURES
✔ content negotiation
✔ get the IP address of the request
✔ refactor params to use a Params type (no any Dict{Symbol,Any})
✔ hooks: before controller action invoked & model hooks (before save, before dehydration, after hydration, etc)
✔ HTML Flax views (and HTML to Flax utility)
✔ refactor Router to use Route types instead of Tuples
✔ link_to should support extra GET params, forward current GET params
✔ should work without a DB
✔ REPL utility to setup a new app
✔ reorganize Genie as a Package
✔ expose command line commands as Genie.REPL methods
✔ add generator for User model (for authentication)
✔ encrypt cookies
✔ beautify error handling (50x, 40x) pages

# SUPPORT
✔ doc comments
✔ official API docs
✔ official website - blog, walkthroughs, tutorials, etc
✔ app examples repos (extract them from the test apps used during development)

# TEST APP
✔ "ToDo-Backend MVC" app

v 0.8
✔ windows support for creating new apps
✔ support for mysql
✔ support for sqlite
✔ database session adapter
✔ memcache session adapter
✔ redis session adapter
✔ database cache adapter
✔ channels (websockets communication)
✔ asset pipeline with Webpack
✔ frontend package management with Yarn.js
✔ Revise.jl to reload function definitions
✔ add utility functions for migrations (add column, add index, create table, etc)
✔ support for Julia 0.6
✔ make SearchLight a completely separate package -- docs, tests and all
✔ make Flax a completely separate package

v 0.8.x
☐ refactoring of authorization and authentication. Use hierarchies of types [Admin > User > Guest] and abitities
☐ redis cache adapter
☐ memcache cache adapter
✔ Toolbox tasks with arguments
☐ SearchLight ODBC support
✔ SearchLight fluent interface (so one can pipe operations select |> from |> ...)
☐ README/Guide
☐ Tests
☐ Complete docstrings and regenerate docs (use DocExtensions)
☐ publish packages
☐ compiled Flax JSON views
✔ better error auto-rendering (json and html, 4xx, 5xx)

v 0.9
☐ tests
✔ upgrade of server stack
☐ custom Genie sysimg: include(joinpath(dirname(JULIA_HOME),"share","julia","build_sysimg.jl")); build_sysimg(force=true)
✔ use macros to completely remove function invocations that produce no effect based on settings (if they are disabled from settings)
☐ investigate more opportunities for parallelizing code

v 1.0
☐ Flax form helpers
☐ add scaffolding functionality for CRUD
☐ PredixUI integration

v 1.x
☐ support for plugins
☐ admin plugin (like Django and Rails Admin)
☐ add a debug port where you can connect through sockets and execute code against a running app
☐ localization support - ex: config for errors messages
☐ mailers
☐ registration functionality - with login URLs by email (passwordless login) and regular (user / pass)
☐ add frontend framework adapters - with Vue.js as default
☐ add the concept of State to sync app state between client (Vue.js data) and server (Genie state)
☐ refactor the views to use data from State and generate the reactive Vue.js code on the client
☐ server side reactivity from State (using Reactive.jl)
☐ reactive plots, tables, lists rendering with Vuejs (reactive UI components)
☐ support for mongodb
☐ marketplace for Genie apps and plugins (list, search and install apps)
