stages:
  - test
  - Documentation (Test)
  - name: Documentation (Deploy)
    if: (branch = master AND type != pull_request) OR tag =~ ^v

language: julia
os:
  - osx
  - linux
julia:
  - 0.6
  - 0.7
  - 1.0
  - nightly
env:
  - JULIA_PROJECT="@."
notifications:
  email: false
env:
  - JULIA_TZ_VERSION="2016j"
script:
  - if [[ -a .git/shallow ]]; then git fetch --unshallow; fi
  # Avoid setting JULIA_TZ_VERSION if the deps/build.jl file has been modified
  - git fetch origin +:refs/remotes/origin/HEAD; if ! git diff --quiet origin/HEAD HEAD -- deps/build.jl; then unset JULIA_TZ_VERSION; fi
  - |
    julia -e '
      VERSION >= v"0.7.0-DEV.3656" && using Pkg
      if VERSION >= v"0.7.0-DEV.5183" && (isfile("Project.toml") || isfile("JuliaProject.toml"))
          Pkg.build(); Pkg.test(coverage=true)
      else
          Pkg.clone(pwd()); Pkg.build("TimeZones"); Pkg.test("TimeZones"; coverage=true)
      end'
after_success:
  - |
    julia -e '
      VERSION >= v"0.7.0-DEV.3656" && using Pkg
      VERSION >= v"0.7.0-DEV.5183" || cd(Pkg.dir("TimeZones"))
      Pkg.add("Coverage"); using Coverage
      Codecov.submit(process_folder())
      Coveralls.submit(Coveralls.process_folder())'
jobs:
  include:
    - &doctest
      stage: "Documentation (Test)"
      os: linux
      julia: 1.0
      script:
        - julia --project=docs/ -e 'using Pkg; Pkg.instantiate(); Pkg.develop(PackageSpec(path=pwd())); Pkg.build("TimeZones")'
        - julia --project=docs/ docs/make.jl
      after_success: skip
    - <<: *doctest
      julia: nightly
    - <<: *doctest
      os: osx
    - <<: *doctest
      os: osx
      julia: nightly
    - stage: "Documentation (Deploy)"
      os: linux
      julia: 1.0
      script:
        - julia --project=docs/ -e 'using Pkg; Pkg.instantiate(); Pkg.develop(PackageSpec(path=pwd())); Pkg.build("TimeZones")'
        - julia --project=docs/ docs/deploy.jl
      after_success: skip
